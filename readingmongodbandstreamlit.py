# -*- coding: utf-8 -*-
"""Readingmongodbandstreamlit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K0AHeY3eDC8eRI0YX-cUkWurPnjBdxTv
"""

# !pip install pyproj
# !pip install geopy

import seaborn as sns
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
from matplotlib.pyplot import figure
sns.set_theme(style='darkgrid', palette='deep')

!pip install "pymongo[srv]"

import pandas as pd
from pymongo import MongoClient
import json
import urllib.parse # if the username/password contain special characters , then password has to be URL encoded
import getpass  # Making use of getpass() prompts the user for a password without echoing for security purpose
 
username = "surbhi"
password=getpass.getpass()

def mongoimport( db_name, coll_name, db_url):
    """ Imports a csv file at path csv_name to a mongo colection
    returns: count of the documants in the new collection
    """
    with MongoClient(db_url) as client:
        print(client)
        db = client[db_name]   # Make a query to the specific DB and Collection
        coll = db[coll_name]
    
         # Expand the cursor and construct the DataFrame
        df =  pd.DataFrame.from_records(coll.find())
    
        return df  # return the count of inserted items


db_name="Bike_Crash_Datbase"                                    # name of the database
coll_name="Bike_Crash_Collection"                               # name of the collection
password = urllib.parse.quote_plus(password)                    # url encoding the password

# defining the connection string
db_url=f"mongodb+srv://{username}:{password}@sandbox.iq6qn.mongodb.net/{db_name}?retryWrites=true&w=majority&ssl=true&ssl_cert_reqs=CERT_NONE"
print(db_url)

# calling the function
df=mongoimport( db_name, coll_name, db_url=db_url)
print(df.head())

!pip install plotly_express

import plotly_express as px

!pip install streamlit

import streamlit as st

st.title("Bicyclist and pedestrian crashes that occurred in North Carolina between years 2007 through 2019")
st.markdown("""
The purpose of this dashboard is to allow users to view the locations of crashes involving 
bicyclists and pedestrians in North Carolina. 
The data comes from police-reported bicycle-motor vehicle and pedestrian-motor vehicle collisions 
that occurred on the public roadway network, public vehicular areas and private properties (if reported)
 from January 2007 through December 2019.

The dashboard can be used to understand the underlying causes of
 crashes and if used and understood effectively can be used to prevent the further crashes
""")

# st.markdown("## " + 'Total Accidents caused by Various Reasons')	
# st.markdown("#### " +"What Reasons would you like to see?")

selected_metrics = st.sidebar.selectbox(
    label="Select Reasons that would you like to analyse?", 
    options=['Accidents by Year and Location',
             'Accidents Grouped by Biker Race and Gender',
             'Accidents by Bikers Age Group',
             "Accidents by Month",
             "Accidents by Traffic Way Description",
             "Accidents by City"]
)

st.write('You selected:', selected_metrics)

import plotly.graph_objects as go

if selected_metrics == 'Accidents by Year and Location':
    fig=px.scatter_mapbox(df, lat="Y", lon="X", zoom=10,mapbox_style="carto-positron",
                      hover_name="County",color="AmbulanceR",animation_frame="CrashYear")
    fig.update_layout(title_text='Accidents by Year and Location')
    fig.show()

if selected_metrics == 'Accidents Grouped by Biker Race and Gender':
 
      fig=px.histogram(df, x='BikeRace', color="BikeSex", barmode='group',labels={'y':'Number of Accidents',"x":"Bikers Race"})
      fig.update_layout(title_text='Accidents GroupedBy Biker Race and Gender')
      fig.show()

if selected_metrics == 'Accidents by Bikers Age Group':
      fig=px.histogram(df, x='BikeAgeGrp',labels={'y':'Number of Accidents',"x":"Bikers Age Group"} )
      fig.update_traces(marker_color='rgb(158,202,225)', marker_line_color='rgb(8,48,107)',
                      marker_line_width=1.5, opacity=0.6)
      fig.update_layout(title_text='Accidents by Bikers Age Group')
      fig.show() 

if selected_metrics == 'Accidents by Month':
      fig=px.histogram(df, x='CrashMonth' ,animation_frame="CrashYear",category_orders=dict(CrashMonth=["January","February","March","April","May","June","July","August","September","October","November","December"]),
                        labels={'y':'Number of Accidents'})
      fig.update_traces(marker_color='rgb(158,202,225)', marker_line_color='rgb(8,48,107)',
                      marker_line_width=1.5, opacity=0.6,textposition='outside')
      fig.update_layout(title_text='Accidents by month',uniformtext_minsize=8, uniformtext_mode='hide')
      fig.show()  

if selected_metrics == 'Accidents by Traffic Way Description':
      
      labels=df.RdConfig.unique()
      values=df.RdConfig.value_counts().values
      # print(labels)
      # print(values)

      # Use `hole` to create a donut-like pie chart
      fig = go.Figure(data=[go.Pie(labels=labels, values=values,pull=[0.2, 0, 0.0, 0], hole=.3,title='Number of Accidents by Traffic way Description')]) 
      fig.update_traces(textinfo='percent+label')
      fig.show()
#if selected_metrics == 'Accidents by City':

st.plotly_chart(fig, use_container_width=True)

st.sidebar.title(" Happy Analysing ")
"""State_list = st.sidebar.selectbox(
    label='Year',
    df.CrashYear)"""



